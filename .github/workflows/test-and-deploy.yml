name: Test and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '21'

    - name: Cache .m2 directory
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      working-directory: ./mermaid-processor
      run: |
        lein deps
        lein test

    - name: Install clj-kondo
      run: |
        mkdir -p $HOME/bin
        curl -L https://github.com/clj-kondo/clj-kondo/releases/download/v2023.10.20/clj-kondo-2023.10.20-linux-amd64.zip -o clj-kondo.zip
        sudo apt-get update
        sudo apt-get install -y unzip
        unzip clj-kondo.zip -d $HOME/bin
        chmod +x $HOME/bin/clj-kondo
        rm clj-kondo.zip

    - name: Lint mermaid-processor with clj-kondo
      working-directory: ./mermaid-processor
      run: 
        $HOME/bin/clj-kondo --lint src

    - name: Lint mermaid-workflow-api with clj-kondo
      working-directory: ./mermaid-workflow-api
      run: 
        $HOME/bin/clj-kondo --lint src

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '21'

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Deploy to Clojars
      working-directory: ./mermaid-processor
      run: |
        VERSION=$(grep 'defproject' project.clj | awk '{print $3}' | tr -d "\"")
        if curl -s -o /dev/null -w "%{http_code}" https://clojars.org/com.jonnymuir/mermaid-processor/versions/$VERSION | grep 200; then
          echo "Version $VERSION already exists on Clojars. Exiting."
        else
          echo "Version $VERSION does not exist on Clojars. Continuing."
          lein uberjar
          lein deploy clojars

          # Poll Clojars for the new version
          echo "Checking for $VERSION on Clojars"
          ATTEMPTS=0
          MAX_ATTEMPTS=5
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            if curl -s -o /dev/null -w "%{http_code}" https://clojars.org/com.jonnymuir/mermaid-processor/versions/$VERSION | grep 200; then
              echo "Version $VERSION found on Clojars. Triggering cljdoc build."
              curl -X POST https://cljdoc.org/api/request-build2 \
                -H "Content-Type: application/x-www-form-urlencoded" \
                -d 'project=com.jonnymuir%2Fmermaid-processor&version='$VERSION
              break
            fi
            ATTEMPTS=$((ATTEMPTS+1))
            echo "Version $VERSION not found on Clojars. Attempt $ATTEMPTS/$MAX_ATTEMPTS. Retrying in 30 seconds..."
            sleep 30
          done

          if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
            echo "Version $VERSION could not be found on Clojars after $MAX_ATTEMPTS attempts. cljdoc build was not triggered."
          fi

        fi
      env:
        LEIN_USERNAME: 'jonnymoo@hotmail.com'
        LEIN_PASSWORD: ${{ secrets.CLOJARS_DEPLOY_TOKEN }}

    - name: Build with Leiningen
      working-directory: ./mermaid-workflow-api
      run: lein uberjar 
  
    - name: Get the name of the uberjar
      run: echo "UBERJAR_NAME=$(ls ./mermaid-workflow-api/target/uberjar/*-standalone.jar)" >> $GITHUB_ENV


    - name: Deploy API to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: mermaid-workflow-api # Your Azure App Service name
        publish-profile: ${{ secrets.AZURE_WEBAPPAPI_PUBLISH_PROFILE }}
        package: ${{ env.UBERJAR_NAME }}


    - name: Build CMS 
      working-directory: ./mermaid-cms
      run: dotnet build --configuration Release
  
    - name: Publish CMS
      working-directory: ./mermaid-cms
      run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/mermaid-cms
  
    - name: Deploy CMS to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'mermaid-cms'  # Set this to your App Service name
        publish-profile: ${{ secrets.AZURE_WEBAPPCMS_PUBLISH_PROFILE }}  # Set this to your publish profile secret
        package: ${{env.DOTNET_ROOT}}/mermaid-cms
  