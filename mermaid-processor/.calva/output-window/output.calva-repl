; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /root/dev/mermaid-workflow/mermaid-processor ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless ; popd
; Using host:port 127.0.0.1:38519 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉mermaid-processor.core꞉> 
clj꞉mermaid-processor.core꞉> 
; Jack-in done.
clj꞉mermaid-processor.core꞉> 
; Evaluating file: parse_test.clj
#'mermaid-processor.parse-test/parse-multiple_nodes
clj꞉mermaid-processor.parse-test꞉> 
(parse-mermaid "flowchart TD
                                  A[My Desc]
                                  B[My other node]")
[:node [:nodeId "A"] [:nodeText "My Desc"]]
clj꞉mermaid-processor.parse-test꞉> 
(parse-mermaid "flowchart TD
                                  A
                                  
; Syntax error compiling at (.calva/output-window/output.calva-repl:1:7956).
; Unable to resolve symbol: A in this context
clj꞉mermaid-processor.parse-test꞉> 

                
                ")
; Execution error (ExceptionInfo) at mermaid-processor.parsers.flowchart/result-or-exception (flowchart.clj:13).
; Parsing failed
clj꞉mermaid-processor.parse-test꞉> 
(parse-mermaid "flowchart TD
                A
                B")
[:node [:nodeId "A"]]
clj꞉mermaid-processor.parse-test꞉> 
(def moo [:S [:node [:nodeId "A"] [:nodeText "My Desc"]] [:node [:nodeId "B"] [:nodeText "My other node"]]])
#'mermaid-processor.parse-test/moo
clj꞉mermaid-processor.parse-test꞉> 
moo
[:S [:node [:nodeId "A"] [:nodeText "My Desc"]] [:node [:nodeId "B"] [:nodeText "My other node"]]]
clj꞉mermaid-processor.parse-test꞉> 
(first moo)
:S
clj꞉mermaid-processor.parse-test꞉> 
(second moo)
[:node [:nodeId "A"] [:nodeText "My Desc"]]
clj꞉mermaid-processor.parse-test꞉> 
(rest moo)
([:node [:nodeId "A"] [:nodeText "My Desc"]] [:node [:nodeId "B"] [:nodeText "My other node"]])
clj꞉mermaid-processor.parse-test꞉> 
